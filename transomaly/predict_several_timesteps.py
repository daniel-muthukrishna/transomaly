import os
import numpy as np
import pandas as pd
import matplotlib
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from collections import OrderedDict
from tensorflow.python.keras.models import load_model
from pkg_resources import resource_filename

from transomaly.prepare_input import PrepareInputArrays
from transomaly.loss_functions import mean_squared_error, chisquare_loss, mean_squared_error_over_error
matplotlib.use('TkAgg')

SCRIPT_DIR = os.path.dirname(os.path.abspath(__file__))
COLPB = {'g': 'tab:green', 'r': 'tab:red'}
MARKPB = {'g': 'o', 'r': 's', 'z': 'd'}
ALPHAPB = {'g': 0.3, 'r': 1., 'z': 1}

CLASS_COLOR = {'SNIa-norm': 'tab:green', 'SNIbc': 'tab:orange', 'SNII': 'tab:blue', 'SNIIn': 'blue',
               'SNIa-91bg': 'tab:red', 'SNIa-x': 'bisque', 'point-Ia': 'tab:brown', 'Kilonova': '#aaffc3',
               'SLSN-I': 'tab:olive', 'PISN': 'tab:cyan', 'ILOT': '#FF1493', 'CART': 'navy', 'TDE': 'tab:pink',
               'AGN': 'tab:purple'}


model_filepath = "/Users/danmuth/OneDrive - University of Cambridge/PycharmProjects/transomaly/plots/model__ci('redshift',)_ns1_c(1,)/keras_model_epochs20_normalised_negloglike_predict_last49_timesteps_nodropout_100lstmneurons/keras_model_epochs20_normalised_negloglike_predict_last49_timesteps_nodropout_100lstmneurons.hdf5"

model = load_model(model_filepath, custom_objects={'loss': mean_squared_error()})

passbands = ('g', 'r')
contextual_info = ('redshift',)

# light_curve_list = [(
#     np.array([58369.1303472, 58365.2179282, 58365.155081 , 58362.1940741,
#         58362.1591551, 58359.2400579, 58356.2171875, 58353.2335069,
#         58353.1621528, 58350.2378241, 58350.1536111, 58346.1759606,
#         58346.1573958, 58343.1807755, 58343.1609722, 58339.1569907,
#         58336.2141898, 58336.1861574, 58333.1785185, 58330.3012616,
#         58330.1741782, 58327.2768171, 58327.1751273, 58324.2565625,
#         58324.1765856, 58320.258125 , 58314.241956 , 58314.1789236,
#         58311.2041204, 58308.2383912, 58308.1957755, 58302.1984375,
#         58299.3486458, 58299.1826736, 58296.2451157, 58293.2660069,
#         58293.2172801]),
#  np.array([ 591.99767352,  402.12400564,  725.10349762,  443.44524257,
#          764.11724292,  870.72296707,  962.14383183,  932.73870789,
#         1006.09733819,  520.42721585, 1130.73282538, 1223.48880533,
#          523.98638181,  530.64001919, 1492.65692446, 1692.7779761 ,
#         1957.22159995,  688.52545359,  867.20145928, 3067.0439545 ,
#         1143.51008724, 3606.11855071, 1438.79857826, 1880.70205889,
#         3754.9140461 , 3552.05760276, 5215.30846099, 5089.5572043 ,
#         6643.54681976, 7141.6736411 , 7220.3790927 , 6577.1841267 ,
#         4745.04133494, 4851.54428518, 2717.94084352,  836.06491714,
#          707.68501556]),
#  np.array([ 72.34213521,  67.00324758,  70.34678542,  58.20182995,
#          49.14460585,  96.24067055,  93.79193833,  95.7286001 ,
#          72.1110607 , 103.68316881, 108.16223063,  67.41370931,
#          59.38266042,  54.92725483,  75.22907763,  99.78528711,
#          92.83396209,  57.40190579,  84.74281324, 161.04876023,
#          93.75311506, 183.63090495, 127.35454034, 140.47961916,
#         155.29062375, 127.23839741, 204.93648666, 214.33882516,
#         241.26095178, 261.62044118, 267.19632462, 222.77052725,
#         222.61704912, 206.58926722, 114.01152584,  76.70895862,
#         120.14144584]),
#  np.array(['r', 'g', 'r', 'g', 'r', 'r', 'r', 'r', 'r', 'g', 'r', 'r', 'g',
#         'g', 'r', 'r', 'r', 'g', 'g', 'r', 'g', 'r', 'g', 'g', 'r', 'r',
#         'g', 'r', 'r', 'r', 'g', 'g', 'r', 'g', 'r', 'r', 'g'],
#        dtype='<U21'),
#  np.array([4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
#         4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
#         4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096, 4096,
#         4096, 4096, 4096, 6144]),
#  239.25960718648648,
#  37.41711755135135,
#  'ZTF18abcrxoj_z=0.03',
#  0.0309,
#  0.0188)]
#
# prepareinputarrays = PrepareInputArrays(passbands, contextual_info)
# X, Xerr, y, yerr, timesX, objids, trigger_mjds, lcs, gp_fits = prepareinputarrays.make_input_arrays(light_curve_list, nsamples=1)
#
# # Get raw light curve observations
# lc = lcs[objids[sidx]]
# gp_lc = gp_fits[objids[sidx]]
# X[0,:,1] = np.linspace(0,0.06,len(X[0,:,1]))
# X[0,:,0] = np.linspace(0,0.07,len(X[0,:,1]))

X = np.array([np.array([[9.95720479e-02, 8.75342102e-02, 0.00000000e+00],
       [9.98801989e-02, 8.34451504e-02, 0.00000000e+00],
       [1.00233705e-01, 7.86600092e-02, 0.00000000e+00],
       [1.00634114e-01, 7.31072794e-02, 0.00000000e+00],
       [1.01080428e-01, 6.67286937e-02, 0.00000000e+00],
       [1.01567613e-01, 5.94917173e-02, 0.00000000e+00],
       [1.02084488e-01, 5.14078113e-02, 0.00000000e+00],
       [1.02610775e-01, 4.25586531e-02, 0.00000000e+00],
       [1.03113017e-01, 3.31332573e-02, 0.00000000e+00],
       [1.03538960e-01, 2.34799360e-02, 0.00000000e+00],
       [1.03809883e-01, 1.41783557e-02, 0.00000000e+00],
       [1.03810177e-01, 6.13868517e-03, 0.00000000e+00],
       [1.03219683e-01, 7.37111569e-04, 0.00000000e+00],
       [8.99201919e-02, 0.00000000e+00, 0.00000000e+00],
       [5.63684866e-02, 6.85289762e-03, 0.00000000e+00],
       [2.12832143e-02, 2.49945958e-02, 0.00000000e+00],
       [4.89519967e-03, 5.04527526e-02, 0.00000000e+00],
       [2.94690171e-02, 7.21127603e-02, 0.00000000e+00],
       [1.00710825e-01, 1.01582430e-01, 0.00000000e+00],
       [2.31339157e-01, 1.88840354e-01, 0.00000000e+00],
       [4.33871157e-01, 3.50272202e-01, 0.00000000e+00],
       [6.50722739e-01, 5.49809890e-01, 0.00000000e+00],
       [8.27455853e-01, 7.50395682e-01, 0.00000000e+00],
       [9.47982530e-01, 9.12629600e-01, 0.00000000e+00],
       [1.00000000e+00, 9.95186358e-01, 0.00000000e+00],
       [9.63150150e-01, 1.00000000e+00, 0.00000000e+00],
       [8.57809797e-01, 9.52385168e-01, 0.00000000e+00],
       [7.16035945e-01, 8.70138428e-01, 0.00000000e+00],
       [5.63176219e-01, 7.74457136e-01, 0.00000000e+00],
       [4.20667563e-01, 6.72908302e-01, 0.00000000e+00],
       [3.03904738e-01, 5.70643017e-01, 0.00000000e+00],
       [2.26705303e-01, 4.76044082e-01, 0.00000000e+00],
       [2.03176206e-01, 3.96839744e-01, 0.00000000e+00],
       [2.11879477e-01, 3.39585217e-01, 0.00000000e+00],
       [2.28828820e-01, 3.00733031e-01, 0.00000000e+00],
       [2.42102611e-01, 2.73569439e-01, 0.00000000e+00],
       [2.56468240e-01, 2.57893587e-01, 0.00000000e+00],
       [2.69746554e-01, 2.51651577e-01, 0.00000000e+00],
       [2.69137350e-01, 2.49709205e-01, 0.00000000e+00],
       [2.39680658e-01, 2.46914175e-01, 0.00000000e+00],
       [1.81504894e-01, 2.41481737e-01, 0.00000000e+00],
       [1.34237502e-01, 2.32363547e-01, 0.00000000e+00],
       [1.08368501e-01, 2.17820294e-01, 0.00000000e+00],
       [9.87130081e-02, 2.05192699e-01, 0.00000000e+00],
       [8.60157640e-02, 1.88990290e-01, 0.00000000e+00],
       [5.00012684e-02, 1.67427701e-01, 0.00000000e+00],
       [1.10527189e-02, 1.44476968e-01, 0.00000000e+00],
       [0.00000000e+00, 1.24278391e-01, 0.00000000e+00],
       [1.88198822e-02, 1.26082525e-01, 0.00000000e+00]])])
y = np.array([np.array([[9.98801989e-02, 8.34451504e-02],
       [1.00233705e-01, 7.86600092e-02],
       [1.00634114e-01, 7.31072794e-02],
       [1.01080428e-01, 6.67286937e-02],
       [1.01567613e-01, 5.94917173e-02],
       [1.02084488e-01, 5.14078113e-02],
       [1.02610775e-01, 4.25586531e-02],
       [1.03113017e-01, 3.31332573e-02],
       [1.03538960e-01, 2.34799360e-02],
       [1.03809883e-01, 1.41783557e-02],
       [1.03810177e-01, 6.13868517e-03],
       [1.03219683e-01, 7.37111569e-04],
       [8.99201919e-02, 0.00000000e+00],
       [5.63684866e-02, 6.85289762e-03],
       [2.12832143e-02, 2.49945958e-02],
       [4.89519967e-03, 5.04527526e-02],
       [2.94690171e-02, 7.21127603e-02],
       [1.00710825e-01, 1.01582430e-01],
       [2.31339157e-01, 1.88840354e-01],
       [4.33871157e-01, 3.50272202e-01],
       [6.50722739e-01, 5.49809890e-01],
       [8.27455853e-01, 7.50395682e-01],
       [9.47982530e-01, 9.12629600e-01],
       [1.00000000e+00, 9.95186358e-01],
       [9.63150150e-01, 1.00000000e+00],
       [8.57809797e-01, 9.52385168e-01],
       [7.16035945e-01, 8.70138428e-01],
       [5.63176219e-01, 7.74457136e-01],
       [4.20667563e-01, 6.72908302e-01],
       [3.03904738e-01, 5.70643017e-01],
       [2.26705303e-01, 4.76044082e-01],
       [2.03176206e-01, 3.96839744e-01],
       [2.11879477e-01, 3.39585217e-01],
       [2.28828820e-01, 3.00733031e-01],
       [2.42102611e-01, 2.73569439e-01],
       [2.56468240e-01, 2.57893587e-01],
       [2.69746554e-01, 2.51651577e-01],
       [2.69137350e-01, 2.49709205e-01],
       [2.39680658e-01, 2.46914175e-01],
       [1.81504894e-01, 2.41481737e-01],
       [1.34237502e-01, 2.32363547e-01],
       [1.08368501e-01, 2.17820294e-01],
       [9.87130081e-02, 2.05192699e-01],
       [8.60157640e-02, 1.88990290e-01],
       [5.00012684e-02, 1.67427701e-01],
       [1.10527189e-02, 1.44476968e-01],
       [0.00000000e+00, 1.24278391e-01],
       [1.88198822e-02, 1.26082525e-01],
       [4.59318983e-02, 1.47583062e-01]])])
timesX = np.array([np.array([-70., -67., -64., -61., -58., -55., -52., -49., -46., -43., -40.,
       -37., -34., -31., -28., -25., -22., -19., -16., -13., -10.,  -7.,
        -4.,  -1.,   2.,   5.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,
        29.,  32.,  35.,  38.,  41.,  44.,  47.,  50.,  53.,  56.,  59.,
        62.,  65.,  68.,  71.,  74.,  77.])])
objids = np.array(['1_14491908'])

X = np.array([np.array([[0.15530665, 0.12895819, 0.        ],
       [0.15767536, 0.13166752, 0.        ],
       [0.16005772, 0.13459436, 0.        ],
       [0.16261577, 0.13756999, 0.        ],
       [0.16521192, 0.14032626, 0.        ],
       [0.16765116, 0.14299208, 0.        ],
       [0.16986432, 0.14563504, 0.        ],
       [0.17195545, 0.14828347, 0.        ],
       [0.17412794, 0.15103504, 0.        ],
       [0.17648719, 0.15403369, 0.        ],
       [0.17917048, 0.15727798, 0.        ],
       [0.18244614, 0.16109141, 0.        ],
       [0.18654495, 0.16613971, 0.        ],
       [0.19220104, 0.17336583, 0.        ],
       [0.20104769, 0.18434123, 0.        ],
       [0.21593169, 0.20153978, 0.        ],
       [0.24032557, 0.22825392, 0.        ],
       [0.27903313, 0.26829618, 0.        ],
       [0.3368775 , 0.32567876, 0.        ],
       [0.41632906, 0.402751  , 0.        ],
       [0.51559808, 0.49877001, 0.        ],
       [0.62771472, 0.60858343, 0.        ],
       [0.73872967, 0.72108709, 0.        ],
       [0.82680141, 0.81900457, 0.        ],
       [0.86902465, 0.88303371, 0.        ],
       [0.85742042, 0.90360413, 0.        ],
       [0.80053207, 0.88317244, 0.        ],
       [0.71412263, 0.83111213, 0.        ],
       [0.61472126, 0.7592167 , 0.        ],
       [0.51613008, 0.67858336, 0.        ],
       [0.42807461, 0.59841923, 0.        ],
       [0.35575527, 0.52507558, 0.        ],
       [0.29999289, 0.46156343, 0.        ],
       [0.25884174, 0.40773722, 0.        ],
       [0.22920572, 0.36214745, 0.        ],
       [0.20784883, 0.32339836, 0.        ],
       [0.19212642, 0.29041058, 0.        ],
       [0.18008795, 0.26248334, 0.        ],
       [0.1705456 , 0.23904478, 0.        ],
       [0.16279926, 0.21941271, 0.        ],
       [0.15617207, 0.20292165, 0.        ],
       [0.15032714, 0.18897799, 0.        ],
       [0.14512378, 0.17693946, 0.        ],
       [0.1405252 , 0.16640135, 0.        ],
       [0.13637619, 0.15706355, 0.        ],
       [0.1325311 , 0.1486261 , 0.        ],
       [0.12902448, 0.14086082, 0.        ],
       [0.12583798, 0.13363004, 0.        ],
       [0.12291569, 0.12689397, 0.        ]])])
y = np.array([np.array([[0.15767536, 0.13166752],
       [0.16005772, 0.13459436],
       [0.16261577, 0.13756999],
       [0.16521192, 0.14032626],
       [0.16765116, 0.14299208],
       [0.16986432, 0.14563504],
       [0.17195545, 0.14828347],
       [0.17412794, 0.15103504],
       [0.17648719, 0.15403369],
       [0.17917048, 0.15727798],
       [0.18244614, 0.16109141],
       [0.18654495, 0.16613971],
       [0.19220104, 0.17336583],
       [0.20104769, 0.18434123],
       [0.21593169, 0.20153978],
       [0.24032557, 0.22825392],
       [0.27903313, 0.26829618],
       [0.3368775 , 0.32567876],
       [0.41632906, 0.402751  ],
       [0.51559808, 0.49877001],
       [0.62771472, 0.60858343],
       [0.73872967, 0.72108709],
       [0.82680141, 0.81900457],
       [0.86902465, 0.88303371],
       [0.85742042, 0.90360413],
       [0.80053207, 0.88317244],
       [0.71412263, 0.83111213],
       [0.61472126, 0.7592167 ],
       [0.51613008, 0.67858336],
       [0.42807461, 0.59841923],
       [0.35575527, 0.52507558],
       [0.29999289, 0.46156343],
       [0.25884174, 0.40773722],
       [0.22920572, 0.36214745],
       [0.20784883, 0.32339836],
       [0.19212642, 0.29041058],
       [0.18008795, 0.26248334],
       [0.1705456 , 0.23904478],
       [0.16279926, 0.21941271],
       [0.15617207, 0.20292165],
       [0.15032714, 0.18897799],
       [0.14512378, 0.17693946],
       [0.1405252 , 0.16640135],
       [0.13637619, 0.15706355],
       [0.1325311 , 0.1486261 ],
       [0.12902448, 0.14086082],
       [0.12583798, 0.13363004],
       [0.12291569, 0.12689397],
       [0.12005423, 0.12062109]])])
timesX = np.array([np.array([-70., -67., -64., -61., -58., -55., -52., -49., -46., -43., -40.,
       -37., -34., -31., -28., -25., -22., -19., -16., -13., -10.,  -7.,
        -4.,  -1.,   2.,   5.,   8.,  11.,  14.,  17.,  20.,  23.,  26.,
        29.,  32.,  35.,  38.,  41.,  44.,  47.,  50.,  53.,  56.,  59.,
        62.,  65.,  68.,  71.,  74.,  77.])])
objids = np.array(['average_Ia'])

# X[0,:,1][31:] = 0
# X[0,:,0][31:] = 0
# y[0,:,1][30:] = 0
# y[0,:,0][30:] = 0
# X[0,:,2] = 0.04

y_predict = model.predict(X)
y_predict_part = np.copy(y_predict)
X_part = np.copy(X)
p = 20
X_part[0, :, 1][p:] = 0
X_part[0, :, 0][p:] = 0

# Append zeros to end to have longer predictions
nfuture = 100
timesX_future = np.array([np.arange(-70,80+3*nfuture,3.)])
y_predict = np.hstack((y_predict, np.zeros((1,nfuture,2))))
X_part = np.hstack((X_part, np.zeros((1,nfuture,3))))
y_predict_part = np.hstack((y_predict_part, np.zeros((1,nfuture,2))))

for i in range(49 - p + nfuture):
       X_part[0, :, 1][p + i] = y_predict_part[0, :, 1][p-1 + i]
       X_part[0, :, 0][p + i] = y_predict_part[0, :, 0][p-1 + i]
       end = max(p+i + 1, 49)   # if p+i >= 49 else 49
       start = max(p+i - 49 + 1, 0)  # if p+i >= 49 else 0
       y_predict_part[:,start:end] = model.predict(X_part[:,start:end])
       y_predict[0][p + i] = y_predict_part[0][p + i]


idx = 0
sidx = 0

argmax = None  # self.timesX[idx].argmax() + 1


fig, (ax1) = plt.subplots(nrows=1, ncols=1)

for pbidx, pb in enumerate(passbands):
    plotlabeltest = "ytest:{}".format(pb)
    plotlabelpred = "ypred:{}".format(pb)
    marker = None  # MARKPB[pb] if s == 0 else None
    ax1.plot(timesX[sidx][1:][:argmax], y[sidx][:, pbidx][:argmax], c=COLPB[pb], lw=1,
             label=plotlabeltest, marker=None, markersize=10, alpha=1, linestyle='-')
    ax1.plot(timesX_future[sidx][1:][:argmax], y_predict[sidx][:, pbidx][:argmax], c=COLPB[pb], lw=1,
             label=plotlabelpred, marker=None, markersize=10, alpha=1, linestyle=':')
    ax1.axvspan(timesX_future[sidx][p], timesX_future[sidx][-1], alpha=0.2, color='grey')

    # pbmask = lc['passband'] == pb
    # sortedidx = np.argsort(lc[pbmask]['time'].data)
    # time = lc[pbmask]['time'].data[sortedidx]
    # flux = lc[pbmask]['flux'].data[sortedidx]
    # fluxerr = lc[pbmask]['fluxErr'].data[sortedidx]

    # ax1.errorbar(time, flux, yerr=fluxerr,
    #              fmt=".", capsize=0, color=COLPB[pb], label='_nolegend_')

ax1.set_ylabel("Relative flux")
ax1.set_xlabel("Time since trigger [days]")
ax1.legend()
plt.savefig(f'predict-several-timesteps-{objids[0]}.png')
plt.show()






